"""
pointer : 각 노드에서 다음 데이터를 가리키는 주소값
head : 링크드리스트에서 가장 시작점 데이터
tail : 링트드리스트에서 가장 마지막 데이터
주소값을 사용하는 변수들은 항상 NULL로 초기화

링크드리스트의 장점 :
  필요할 때마다 그때 그때 메모리를 생성
  추가하거나 삭제할 때 항상 일정한 속도로 빠르게 진행 가능
  데이터 추가 삭제가 편리함.
링크드리스트의 단점 : 
  인덱스가 없어서 데이터를 찾기가 힘듦. 앞에서부터 찾거나 뒤에서부터 찾아야함.
"""
class Node:
  def __init__(self, data): #자동으로 데이터 저장(initialize)
    self.data = data
    self.next = 0 #그 다음번 주소값

#클래스로 공간 만들기->객체 생성
a = Node(10)
b = Node(5)
c = Node(3)

#연결하기
a.next = b #b의 주소값을 a에 넣기
b.next = c #c의 조소값을 b에 넣기

#a의 변수를 이용해서 b의 데이터 확인
#객체의 주소를 확인하는 함수 : id(변수명)
print(a.next.data) #b의 데이터인 5 출력
#a를 가지고 c의 데이터 확인
print(a.next.next.data)#c의 데이터인 3 출력